function [outputArg1,outputArg2] = candidateTrianglation(prev_img, curr_img, prev_state, tracker)

    %% Introducing candidates if appropriate
    [candidate_tracked, val_cand, score] =tracker.track(prev_img,...
                                          curr_img,...
                                          prev_state.candidate_keypoints);
    for i=find(val_cand)
        cand_landmark = triangulate(prev_state.candidate_first_keypoints(i,:),...
                                    candidate_tracked(i,:),...
                                    prev_state.candidate_first_poses{i},...
                                    curr_pose);
                  triangulateMultiView(              
        % TODO: define calculate_angle function
        if calculate_angle(cand_landmark, prev_state.candidate_first_poses{i},...
                            curr_pose) > admissible_angular_threshold
            curr_state.landmarks = [curr_state.landmarks;...
                                    cand_landmark];
            curr_state.keypoints = [curr_state.keypoints;...
                                    candidate_tracked(i,:)];
        else
            % Discard candidate if has been stored for too long
            if prev_state.candidate_time_indxs(i) >= -max_temporal_recall
                curr_state.candidate_keypoints = [curr_state.dandidate_keypoints;...
                                                  candidate_tracked(i,:)];
                curr_state.candidate_first_keypoints = [curr_state.candidate_first_keypoints(i,:);...
                                                        prev_state.candidate_first_keypoints(i,:)];
                curr_state.candidate_first_poses = [curr_state.candidate_first_poses(i,:);...
                                                     prev_state.candidate_first_poses(i)];
                curr_state.cadidate_time_indxs = [curr_state.candidate_time_indxs, ...
                                                  prev_state.candidate_time_indxs(i)-1];
            end
        end
        
    end

end
